{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./spec/in-browser/index.js","webpack:///./spec/unit sync .spec$","webpack:///./spec/unit/always.spec.ts","webpack:///./spec/unit/di.spec.ts","webpack:///./src/di.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"spec.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./spec/in-browser/index.js\");\n","\n// Our webpack.unit.tests.config.js file uses this to require all unit test files\n// so they can be tested in a browser for debugging\n\n// require all test files\nvar testsContext = require.context('../unit', true, /.spec$/);\ntestsContext.keys().forEach(testsContext);\n","var map = {\n\t\"./always.spec\": \"./spec/unit/always.spec.ts\",\n\t\"./di.spec\": \"./spec/unit/di.spec.ts\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./spec/unit sync recursive .spec$\";","\n/**\n * IMPORTANT:\n * You should always have a spec test, its needed so that the gerenated code\n * is outputed into the compiled directory like:\n * /compiled/src/\n * /compiled/spec/\n */\ndescribe('Always have a spec', () => {\n  it('should always have a spec test', () => {\n    expect(true).toEqual(true);\n  });\n});","import { DI, IDIProvider } from '../../src';\n\ndescribe('DI:', () => {\n\n  afterEach(() => {\n    DI.clear();\n  });\n\n\n\n  /**\n   * Inject()\n   */\n  describe('Inject()', () => {\n    it('should inject dependency', () => {\n      class UtilityService {\n        add(num1: number, num2: number): number { return num1 + num2; }\n      }\n\n      class MyTest {\n        @DI.Inject(UtilityService)\n        private utilitySrv: UtilityService;\n\n        addNumbers(num1: number, num2: number): number {\n          return this.utilitySrv.add(num1, num2);\n        }\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.addNumbers(2,2)).toEqual(4);\n    });\n\n    it('should inject singleton', () => {\n      let cnt = 0;\n      class UtilityService {\n        private name: string;\n\n        constructor() {\n          cnt++;\n          this.name = 'util-' + cnt;\n        }\n\n        getName(): string { return this.name; }\n      }\n\n      class MyTest1 {\n        @DI.Inject(UtilityService)\n        private utilitySrv: UtilityService;\n\n        getName(): string {\n          return this.utilitySrv.getName();\n        }\n      }\n\n      class MyTest2 {\n        @DI.Inject(UtilityService)\n        private utilitySrv: UtilityService;\n\n        getName(): string {\n          return this.utilitySrv.getName();\n        }\n      }\n\n      expect(new MyTest1().getName()).toEqual('util-1');\n      expect(new MyTest2().getName()).toEqual('util-1');\n    });\n\n    it('should throw error as no service set', () => {\n      try {\n        class UtilityService { name = 'util'; }\n        class MyTest1 {\n          @DI.Inject(undefined)\n          private utilitySrv: UtilityService;\n        }\n      } catch(e) {\n        expect(e.message).toContain('Inject() error');\n      }\n    });\n  });\n\n\n\n\n  /**\n   * Inject() - with provider\n   */\n  describe('Inject() - with provider', () => {\n    it('should inject using factory', () => {\n      let env = 'dev';\n\n      abstract class BaseStorageService {\n        abstract name: string;\n      }\n      class FileStorageService extends BaseStorageService {\n        name = 'file-storage';\n      }\n      class MemoryStorageService extends BaseStorageService {\n        name = 'memory-storage';\n      }\n\n      const storageFactory: IDIProvider = {\n        provide: BaseStorageService,\n        useFactory: () => {\n          if (env === 'dev') return new MemoryStorageService();\n          return new FileStorageService();\n        }\n      };\n\n      class MyTest {\n        @DI.Inject(storageFactory)\n        public storageSrv: BaseStorageService;\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.storageSrv.name).toEqual('memory-storage');\n      DI.clear();\n      env = 'prod';\n      const myTest2 = new MyTest();\n      expect(myTest2.storageSrv.name).toEqual('file-storage');\n    });\n\n    it('should inject using factory as mock', () => {\n      class UserModel { name = 'user'; }\n      class MockUserModel { name = 'mock-user'; }\n\n      const userProvider: IDIProvider = {\n        provide: UserModel,\n        useClass: MockUserModel\n      };\n\n      class MyTest {\n        @DI.Inject(userProvider)\n        public user: UserModel;\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.user.name).toEqual('mock-user');\n    });\n\n    it('should inject using factory with constructor parameters', () => {\n      class Names {\n        names = ['Nathan', 'David'];\n      }\n\n      class UtilityService {\n        addFullStop(str: string) {\n          return str + '.';\n        }\n      }\n\n      class UserService {\n        private name: string;\n        @DI.Inject(UtilityService)\n        private utilitySrv: UtilityService;\n\n        constructor(name: string) {\n          this.name = name;\n        }\n\n        getName(): string {\n          return this.utilitySrv.addFullStop(this.name);\n        }\n      }\n\n      const userFactory: IDIProvider = {\n        provide: UserService,\n        useFactory: () => {\n          const name: Names = DI.getService(Names);\n          return new UserService(name.names[0]);\n        }\n      };\n\n      class UserModel {\n        @DI.Inject(userFactory)\n        userSrv: UserService;\n      }\n      const user = new UserModel();\n      expect(user.userSrv.getName()).toEqual('Nathan.');\n    });\n  });\n\n\n\n\n  /**\n   * override()\n   */\n  describe('override()', () => {\n    it('should override dependency in the container', () => {\n      class UtilityService {\n        name = 'util-1';\n      }\n\n      class MyTest {\n        @DI.Inject(UtilityService)\n        public utilitySrv: UtilityService;\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.utilitySrv.name).toEqual('util-1');\n      const utilSrv = new UtilityService();\n      utilSrv.name = 'util-2';\n      DI.override(UtilityService, utilSrv);\n      expect(myTest.utilitySrv.name).toEqual('util-2');\n    });\n\n    it('should override dependency via a provider', () => {\n      class UserModel { name = 'user'; }\n      class MockUserModel { name = 'mock-user'; }\n\n      const userProvider: IDIProvider = {\n        provide: UserModel,\n        useClass: MockUserModel\n      };\n\n      class MyTest {\n        @DI.Inject(userProvider)\n        public user: UserModel;\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.user.name).toEqual('mock-user');\n      const myTest2 = new MockUserModel();\n      myTest2.name = 'mock-user-2';\n      DI.override(userProvider, myTest2);\n      expect(myTest.user.name).toEqual('mock-user-2');\n      const containerName = DI.getContainerName(userProvider);\n      const container = DI.getContainer();\n      expect(container[containerName].name).toEqual('mock-user-2');\n    });\n  });\n\n\n\n\n  /**\n   * getService()\n   */\n  describe('getService()', () => {\n    it('should get service from container', () => {\n      class UtilityService {\n        name = 'util-1';\n      }\n\n      class MyTest {\n        @DI.Inject(UtilityService)\n        public utilitySrv: UtilityService;\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.utilitySrv.name).toEqual('util-1');\n      const srv = DI.getService(UtilityService);\n      expect(srv.name).toEqual('util-1');\n      // should still return service even if it has not yet been set\n      DI.clear();\n      const srv2 = DI.getService(UtilityService);\n      expect(srv2.name).toEqual('util-1');\n      const srv3 = DI.getService(UtilityService);\n      expect(srv3.name).toEqual('util-1');\n    });\n\n    it('should get service via a provider', () => {\n      class UserModel { name = 'user'; }\n      class MockUserModel { name = 'mock-user'; }\n\n      const userProvider: IDIProvider = {\n        provide: UserModel,\n        useClass: MockUserModel\n      };\n\n      class MyTest {\n        @DI.Inject(userProvider)\n        public user: UserModel;\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.user.name).toEqual('mock-user');\n      const srv = <UserModel>DI.getService(userProvider);\n      expect(srv.name).toEqual('mock-user');\n    });\n  });\n\n\n\n\n  /**\n   * clear()\n   */\n  describe('clear()', () => {\n    it('should clear all dependencies from container', () => {\n      class UtilityService {\n        name = 'util-1';\n      }\n\n      class MyTest {\n        @DI.Inject(UtilityService)\n        public utilitySrv: UtilityService;\n      }\n\n      const myTest = new MyTest();\n      expect(myTest.utilitySrv.name).toEqual('util-1');\n      const containerName = DI.getContainerName(UtilityService);\n      expect(DI.getContainer()[containerName]).toBeDefined();\n      DI.clear();\n      expect(Object.keys(DI.getContainer()).length).toBeLessThan(1);\n    });\n  });\n});\n\n","// Our dependency container that holds all our dependencies\nlet dependencyContainer = {};\n\n\n/**\n * Generate a random string\n *\n * @returns {string}\n */\nconst generateId = (): string => {\n  return (Date.now().toString(36) + Math.random().toString(36).substr(2, 5))\n    .toUpperCase();\n};\n\n\n/**\n * Add a container name to the target class / service\n *\n * @param {*} target\n */\nconst addContainerName = (target: any) => {\n  target.diContainerName = target.name + generateId();\n};\n\n\n/**\n * Determine if the object is a provider json object\n *\n * @param {*} obj\n * @returns\n */\nconst isProvider = (obj: any) => {\n  return (obj.constructor === {}.constructor\n  && obj.provide && (obj.useFactory || obj.useClass));\n};\n\n\n/**\n * Add the service from a provider to the dependency container\n *\n * @param {IDIProvider} provider\n * @returns {string}\n */\nconst addServiceToContainerFromProvider = (provider: IDIProvider): string => {\n  if (!provider.provide.diContainerName) {\n    addContainerName(provider.provide);\n  }\n  const containerName = provider.provide.diContainerName;\n  if (!dependencyContainer[containerName]) {\n    dependencyContainer[containerName] = (provider.useClass)\n    ? new provider.useClass() : provider.useFactory();\n  }\n  return containerName;\n};\n\n\n/**\n * Add the service to the dependency container\n *\n * @param {*} service\n * @returns {string}\n */\nconst addServiceToContainer = (service: any): string => {\n  if (!service.diContainerName) addContainerName(service);\n  if (!dependencyContainer[service.diContainerName]) {\n    dependencyContainer[service.diContainerName] = new service();\n  }\n  return service.diContainerName;\n};\n\n\n/**\n * Simple class to handle dependency injection\n *\n * @export\n * @class DI\n */\nexport class DI {\n\n  /**\n   * Inject Decorator: Inject a singleton instance of a service\n   *\n   * @export\n   * @param {*} service\n   * @returns\n   */\n  static Inject(service: any|IDIProvider) {\n    return (target: any, propName: string): any => {\n      Object.defineProperty(target, propName, {\n        get: () => {\n          if (!service) {\n            throw new Error('Inject() error, injected service not set');\n          }\n          // lets check if a provider was passed in\n          if (isProvider(service)) {\n            const containerName = addServiceToContainerFromProvider(service);\n            return dependencyContainer[containerName];\n          } else {\n            return dependencyContainer[addServiceToContainer(service)];\n          }\n        }\n      });\n    };\n  }\n\n\n  /**\n   * Set / Override a dependency. Useful when running unit tests\n   *\n   * @export\n   * @param {string} serviceName\n   * @param {*} dependencyInstance\n   */\n  static override(service: any|IDIProvider, dependencyInstance: any) {\n    if (isProvider(service)) {\n      const containerName = addServiceToContainerFromProvider(service);\n      dependencyContainer[containerName] = dependencyInstance;\n    } else {\n      const containerName = addServiceToContainer(service);\n      dependencyContainer[containerName] = dependencyInstance;\n    }\n  }\n\n\n  /**\n   * Get a service, if it does not exist already, we create one\n   *\n   * @export\n   * @param {*} service\n   * @returns {*}\n   */\n  static getService(service: any|IDIProvider): any {\n    if (isProvider(service)) {\n      const containerName = addServiceToContainerFromProvider(service);\n      return dependencyContainer[containerName];\n    } else {\n      return dependencyContainer[addServiceToContainer(service)];\n    }\n  }\n\n\n  /**\n   * Clear all dependencies\n   *\n   * @static\n   * @memberof DI\n   */\n  static clear() {\n    dependencyContainer = {};\n  }\n\n\n  /**\n   * Get the container that holds all the dependencies\n   *\n   * @static\n   * @returns {*}\n   * @memberof DI\n   */\n  static getContainer(): any {\n    return dependencyContainer;\n  }\n\n\n  /**\n   * Get the name used in the container for a service\n   *\n   * @static\n   * @param {(any|IDIProvider)} service\n   * @returns {string}\n   * @memberof DI\n   */\n  static getContainerName(service: any|IDIProvider): string {\n    let containerName = '';\n    if (isProvider(service)) {\n      containerName = addServiceToContainerFromProvider(service);\n    } else {\n      containerName = addServiceToContainer(service);\n    }\n    return containerName;\n  }\n}\n\n\nexport interface IDIProvider {\n  provide: any;\n  useFactory?: () => any;\n  useClass?: any;\n}","export * from './di';\n"],"sourceRoot":""}